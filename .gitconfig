[user]
    email = askedrelic@gmail.com
    name = Matt Behrens
[apply]
    # Detect whitespace errors when applying a patch
    whitespace = fix
[color]
    pager = true
    # Use colors in Git commands that are capable of colored output when
    # outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
    ui    = auto
[color "branch"]
    current = yellow reverse
    local   = yellow
    remote  = green
[color "diff"]
    meta       = yellow bold
    commit     = green bold
    frag       = magenta bold # line info
    old        = red          # deletions
    new        = green        # additions
    whitespace = red reverse
[color "status"]
    added     = yellow
    changed   = green
    untracked = cyan
[color "diff-highlight"]
    oldNormal = red bold
    oldHighlight = "red bold 52"
    newNormal = "green bold"
    newHighlight = "green bold 22"
    whitespace = fix
[core]
    excludesfile   = ~/.gitignore

    # Force pager to work with colors
    pager          = less -FRSX

    # Treat spaces before tabs and all kinds of trailing whitespace as an error
    # [default] trailing-space: looks for spaces at the end of a line
    # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
    whitespace = space-before-tab,-indent-with-non-tab,trailing-space

    # Make `git rebase` safer on OS X
    # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
    trustctime = false

    # Prevent showing files whose names contain non-ASCII symbols as unversioned.
    # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
    precomposeunicode = false
[alias]
    # Add all (tracked and untracked)
    aa = add --all

    ci = commit -v
    cm = commit -m
    br = branch
    co = checkout

    # Commit all changes
    ca = commit -a

    # View the current working tree status using the short format
    s = status -s

    # Simple status, for piping
    ss = "!git status -s | awk '{print $2}'"

    # Switch to a branch, creating it if necessary
    go = checkout -B

    # WIP commit. Don't abuse this! Ignores precommit hook
    wip = commit --no-verify -am "WIP"

    # remove the top commit, to unstaged index
    pop = reset HEAD^

    # kill the last commit
    drop = reset --hard HEAD^

    # list things
    ls = ls-files
    ls-ignored = ls-files --others -i --exclude-standard

    # retouch all the files, for things that watch filesystem events
    touch = "!git status -s | awk '{print $2}' | xargs touch"

    # fetch all
    fall = fetch --all

    # Remove branches that have already been merged with master
    # a.k.a. ‘delete merged’
    dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

    # Show verbose output about tags, branches or remotes
    tags = tag -l
    branches = branch -a
    remotes = remote -v

    # Interactive rebase with the given number of latest commits
    reb = "!r() { git rebase -i HEAD~$1; }; r"

    # Find branches containing commit
    fb = "!f() { git branch -a --contains $1; }; f"

    # Find tags containing commit
    ft = "!f() { git describe --always --contains $1; }; f"

    # Find commits by source code
    fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

    # Find commits by commit message
    fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

    # List contributors with number of commits
    contributors = shortlog --summary --numbered

    # figure out what a revision is
    human = name-rev --name-only --refs=refs/heads/*

    # Current branch name, for piping
    bname = rev-parse --abbrev-ref HEAD

    # history
    h    = log --pretty=format:'%Cred%h%Creset (%Cgreen%cr%Creset) [%Cblue%an%Creset]%C(yellow)%d%Creset %s ' --graph --abbrev-commit --date=relative --topo-order

    # flat history
    hf   = log --pretty=format:'%Cred%h%Creset (%Cgreen%cr%Creset) [%Cblue%an%Creset]%C(yellow)%d%Creset %s ' --abbrev-commit --date=relative --date-order --no-merges

    hist-refs = log --all --graph --decorate --oneline --simplify-by-decoration --no-merges

    hp               = log -p --abbrev-commit --date=relative --color-words --abbrev
    hist-patch       = log -p --abbrev-commit --date=relative --color-words --abbrev
    hs               = log -M --summary --stat --abbrev-commit --date=relative --no-merges --date-order
    hist-stat        = log -M --summary --stat --abbrev-commit --date=relative --no-merges --date-order

    # diff
    staged     = diff --patience --cached --patch-with-stat
    un         = diff --patience --patch-with-stat
    unstaged   = diff --patience --patch-with-stat
    both       = diff HEAD --patch-with-stat

    ds         = diff --stat -r
    diff-stat  = diff --stat -r

    type       = cat-file -t
    dump       = cat-file -p

    # my history, ignore quiting less error
    me = !git h --author="$GIT_AUTHOR_EMAIL" || TRUE

    # open all current changed files in vim
    edit = !vim -p `git diff HEAD --name-only`
    e = !git edit
    eg = !gvim -p `git diff HEAD --name-only`


    sp = ![[ -z $(git status --porcelain -uno) ]] && git pull || git stash && git pull && git stash pop
    spp = ![[ -z $(git status --porcelain -uno) ]] && git pull || git stash && git pull && git push && git stash pop
    pp = !git pull && git push
    ppu = !git pp && git submodule sync && git submodule update --init

    prune-all = !git prune-remote && git prune-merged
    prune-remote = !git remote | xargs -n 1 git remote prune
    prune-merged = !git branch --merged | grep -v \\* | xargs -n 1 git branch -d

    edit-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; $EDITOR `f`"
    add-unmerged  = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; git add `f`"

    # list branches sorted by last modified
    b = "!git for-each-ref --sort='-authordate' --format='%(authordate)%09%(objectname:short)%09%(refname)' refs/heads | sed -e 's-refs/heads/--'"

    # list git aliases
    la = "!git config -l | grep alias | cut -c 7-"
    dsf = "!git diff --color $@ | diff-so-fancy"

[branch]
    #When branching off a remote branch, automatically let the local branch track the remote branch:
    autosetupmerge = true
    #Always rebase!
    autosetuprebase = always
[github]
    user = askedrelic
[diff]
    #Allow git diff to do basic rename and copy detection
    renames = copies
    #Tell git diff to use mnemonic prefixes (index, work tree, commit, object) instead of the standard a and b notation
    mnemonicprefix = true
[push]
    #When pushing without giving a refspec, push the current branch to its upstream branch.
    default = tracking
    # Make `git push` push relevant annotated tags when pushing branches out.
    followTags = true
[merge]
    # Include summaries of merged commits in newly created merge commit messages
    log = true
[difftool]
    prompt = false
[grep]
    extendedRegexp = true
[rebase]
    autosquash = true
[help]
    # Automatically correct and execute mistyped commands
    autocorrect = 1
[gh]
    protocol = https
    autoUpdate = never
[credential "https://github.com"]
    username = askedrelic
[http "https://gopkg.in"]
	followRedirects = true
